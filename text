 customRender={(field, value, error, onParentChange, formValues, options) => {
          if (field.type === 'object' && field?.fields) {
            const onChange = (name: string, value: any) => {
              onParentChange(`${field.name}.${name}`, value);
            };

            const parentName = field.name;

            const fieldError: Record<string, React.ReactNode> =
              error &&
              typeof error === 'object' &&
              !React.isValidElement(error) &&
              !Array.isArray(error) &&
              !(error instanceof Promise)
                ? (error as Record<string, React.ReactNode>)
                : {};

            const content = field?.fields.map((field, index) => (
              <Grid.Col key={index} span={{ base: 12, md: 6 }}>
                <FieldRender
                  key={index}
                  field={field}
                  formValues={formValues}
                  onChange={onChange}
                  error={fieldError[`${parentName}.${field.name}`]}
                  value={value[field.name]}
                />
              </Grid.Col>
            ));

            return (
              <>
                <Accordion
                  defaultValue={field.name}
                  variant="contained"
                  styles={{
                    root: {
                      border:
                        typeof error === 'object' && Object.keys(fieldError).length
                          ? 'red 1px solid'
                          : undefined,
                    },
                  }}
                >
                  <Accordion.Item value={field.name}>
                    <Accordion.Control
                      styles={{
                        label: {
                          visibility: 'hidden',
                        },
                      }}
                    >
                      {field.label}
                    </Accordion.Control>
                    <Accordion.Panel>
                      <Grid>{content}</Grid>
                    </Accordion.Panel>
                  </Accordion.Item>
                </Accordion>
              </>
            );
          }
          return null;
        }}